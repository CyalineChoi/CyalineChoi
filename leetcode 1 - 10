# 1. Two Sums
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        h = {}
        for i, num in enumerate(nums):
            n = target - num
            if n not in h:
                h[num] = i
            else:
                return [h[n], i]

# 2. Add Two Numbers 
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        s1 = ''
        s2 = ''
        while l1 != None:
            s1 += str(l1.val)
            l1 = l1.next
        while l2 != None:
            s2 += str(l2.val)
            l2 = l2.next
        
        sum1 = int(s1[::-1]) + int(s2[::-1])
        sum1 = str(sum1)
        head = ListNode(int(sum1[0]))
        for i in sum1[1:]:
            node = ListNode(int(i))
            node.next = head
            head = node
        return head

# 3. Longest Substring without repeating characters
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        dicts = {}
        maxlength = start = 0
        for i,value in enumerate(s):
            if value in dicts:
                sums = dicts[value] + 1
                if sums > start:
                    start = sums
            num = i - start + 1
            if num > maxlength:
                maxlength = num
            dicts[value] = i
        return maxlength

# 4. Median of Two Sorted Array
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        sort = sorted(nums1 + nums2)
        if len(sort)%2 == 1:
            return sort[(len(sort)/2)]
        else:
            return (sort[(len(sort)/2)] + sort[(len(sort)/2) - 1] )/2.0

# 5. Longest Palindrome
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        res = ""
        for i in xrange(len(s)):
            # odd case, like "aba"
            tmp = self.helper(s, i, i)
            if len(tmp) > len(res):
                res = tmp
            # even case, like "abba"
            tmp = self.helper(s, i, i+1)
            if len(tmp) > len(res):
                res = tmp
        return res
# get the longest palindrome, l, r are the middle indexes   
# from inner to outer
    def helper(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1; r += 1
        return s[l+1:r]
